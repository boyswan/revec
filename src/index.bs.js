// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function opVec(fn, param) {
  var match = param[0];
  if (match) {
    var match$1 = match[1];
    if (match$1) {
      var match$2 = match$1[1];
      var b = match$1[0];
      var a = match[0];
      if (match$2) {
        var match$3 = match$2[1];
        var c = match$2[0];
        if (match$3) {
          if (match$3[1]) {
            return /* [] */0;
          } else {
            var match$4 = param[1];
            if (match$4) {
              var match$5 = match$4[1];
              var e = match$4[0];
              var d = match$3[0];
              if (match$5) {
                var match$6 = match$5[1];
                if (match$6) {
                  var match$7 = match$6[1];
                  if (match$7 && !match$7[1]) {
                    return /* :: */[
                            Curry._2(fn, a, e),
                            /* :: */[
                              Curry._2(fn, b, match$5[0]),
                              /* :: */[
                                Curry._2(fn, c, match$6[0]),
                                /* :: */[
                                  Curry._2(fn, d, match$7[0]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ];
                  } else {
                    return /* [] */0;
                  }
                } else {
                  return /* [] */0;
                }
              } else {
                return /* :: */[
                        Curry._2(fn, a, e),
                        /* :: */[
                          Curry._2(fn, b, e),
                          /* :: */[
                            Curry._2(fn, c, e),
                            /* :: */[
                              Curry._2(fn, d, e),
                              /* [] */0
                            ]
                          ]
                        ]
                      ];
              }
            } else {
              return /* [] */0;
            }
          }
        } else {
          var match$8 = param[1];
          if (match$8) {
            var match$9 = match$8[1];
            var d$1 = match$8[0];
            if (match$9) {
              var match$10 = match$9[1];
              if (match$10 && !match$10[1]) {
                return /* :: */[
                        Curry._2(fn, a, d$1),
                        /* :: */[
                          Curry._2(fn, b, match$9[0]),
                          /* :: */[
                            Curry._2(fn, c, match$10[0]),
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                return /* [] */0;
              }
            } else {
              return /* :: */[
                      Curry._2(fn, a, d$1),
                      /* :: */[
                        Curry._2(fn, b, d$1),
                        /* :: */[
                          Curry._2(fn, c, d$1),
                          /* [] */0
                        ]
                      ]
                    ];
            }
          } else {
            return /* [] */0;
          }
        }
      } else {
        var match$11 = param[1];
        if (match$11) {
          var match$12 = match$11[1];
          var c$1 = match$11[0];
          if (match$12) {
            if (match$12[1]) {
              return /* [] */0;
            } else {
              return /* :: */[
                      Curry._2(fn, a, c$1),
                      /* :: */[
                        Curry._2(fn, b, match$12[0]),
                        /* [] */0
                      ]
                    ];
            }
          } else {
            return /* :: */[
                    Curry._2(fn, a, c$1),
                    /* :: */[
                      Curry._2(fn, b, c$1),
                      /* [] */0
                    ]
                  ];
          }
        } else {
          return /* [] */0;
        }
      }
    } else {
      return /* [] */0;
    }
  } else {
    return /* [] */0;
  }
}

function make(op, x, y) {
  return opVec(op, /* tuple */[
              x,
              y
            ]);
}

function list_of_tuple1(a) {
  return /* :: */[
          a,
          /* [] */0
        ];
}

function list_of_tuple2(param) {
  return /* :: */[
          param[0],
          /* :: */[
            param[1],
            /* [] */0
          ]
        ];
}

function list_of_tuple3(param) {
  return /* :: */[
          param[0],
          /* :: */[
            param[1],
            /* :: */[
              param[2],
              /* [] */0
            ]
          ]
        ];
}

function list_of_tuple4(param) {
  return /* :: */[
          param[0],
          /* :: */[
            param[1],
            /* :: */[
              param[2],
              /* :: */[
                param[3],
                /* [] */0
              ]
            ]
          ]
        ];
}

function tuple_of_list1(param) {
  if (param && !param[1]) {
    return param[0];
  } else {
    return 0;
  }
}

function tuple_of_list2(param) {
  if (param) {
    var match = param[1];
    if (match) {
      if (match[1]) {
        return /* tuple */[
                0,
                0
              ];
      } else {
        return /* tuple */[
                param[0],
                match[0]
              ];
      }
    } else {
      return /* tuple */[
              0,
              0
            ];
    }
  } else {
    return /* tuple */[
            0,
            0
          ];
  }
}

function tuple_of_list3(param) {
  if (param) {
    var match = param[1];
    if (match) {
      var match$1 = match[1];
      if (match$1) {
        if (match$1[1]) {
          return /* tuple */[
                  0,
                  0,
                  0
                ];
        } else {
          return /* tuple */[
                  param[0],
                  match[0],
                  match$1[0]
                ];
        }
      } else {
        return /* tuple */[
                0,
                0,
                0
              ];
      }
    } else {
      return /* tuple */[
              0,
              0,
              0
            ];
    }
  } else {
    return /* tuple */[
            0,
            0,
            0
          ];
  }
}

function tuple_of_list4(param) {
  if (param) {
    var match = param[1];
    if (match) {
      var match$1 = match[1];
      if (match$1) {
        var match$2 = match$1[1];
        if (match$2) {
          if (match$2[1]) {
            return /* tuple */[
                    0,
                    0,
                    0,
                    0
                  ];
          } else {
            return /* tuple */[
                    param[0],
                    match[0],
                    match$1[0],
                    match$2[0]
                  ];
          }
        } else {
          return /* tuple */[
                  0,
                  0,
                  0,
                  0
                ];
        }
      } else {
        return /* tuple */[
                0,
                0,
                0,
                0
              ];
      }
    } else {
      return /* tuple */[
              0,
              0,
              0,
              0
            ];
    }
  } else {
    return /* tuple */[
            0,
            0,
            0,
            0
          ];
  }
}

var Tuple = /* module */[
  /* list_of_tuple1 */list_of_tuple1,
  /* list_of_tuple2 */list_of_tuple2,
  /* list_of_tuple3 */list_of_tuple3,
  /* list_of_tuple4 */list_of_tuple4,
  /* tuple_of_list1 */tuple_of_list1,
  /* tuple_of_list2 */tuple_of_list2,
  /* tuple_of_list3 */tuple_of_list3,
  /* tuple_of_list4 */tuple_of_list4
];

function add(param, param$1) {
  return make((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), param, param$1);
}

function multiply(param, param$1) {
  return make(Caml_int32.imul, param, param$1);
}

function divide(param, param$1) {
  return make(Caml_int32.div, param, param$1);
}

function subtract(param, param$1) {
  return make((function (prim, prim$1) {
                return prim - prim$1 | 0;
              }), param, param$1);
}

var Pervasives = /* module */[
  /* +^ */add,
  /* *^ */multiply,
  /* /^ */divide,
  /* -^ */subtract
];

var Vector = /* module */[
  /* list_of_tuple1 */list_of_tuple1,
  /* list_of_tuple2 */list_of_tuple2,
  /* list_of_tuple3 */list_of_tuple3,
  /* list_of_tuple4 */list_of_tuple4,
  /* tuple_of_list1 */tuple_of_list1,
  /* tuple_of_list2 */tuple_of_list2,
  /* tuple_of_list3 */tuple_of_list3,
  /* tuple_of_list4 */tuple_of_list4,
  /* add */add,
  /* multiply */multiply,
  /* divide */divide,
  /* subtract */subtract,
  /* Pervasives */Pervasives
];

exports.opVec = opVec;
exports.make = make;
exports.Tuple = Tuple;
exports.Vector = Vector;
/* No side effect */
